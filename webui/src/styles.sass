/* You can add global styles to this file, and also import other style files */

// "low" is lower priority CSS layer.
// Put here all rules that shouldn't overwrite PrimeNG styling.
@layer low
  // Overwrite default browser underlined anchors.
  a
    text-decoration: none
    color: var(--primary-color)

    // Apply the underline only for :hover.
    &:hover
      text-decoration: underline

  // Underlined section header style.
  h3.underlined
    padding: 3px 6px 3px 6px
    margin-top: 2px
    border-bottom: 2px solid var(--surface-border)

// "high" is higher priority CSS layer.
// Put here all rules that overwrite PrimeNG styling.
@layer high
  // When the table header has p-panel inside, do not add extra horizontal padding,
  // because the panel has it's own padding.
  .p-datatable .p-datatable-header:has(.p-panel)
    padding-left: 0
    padding-right: 0

  // p-panel with .p-panel-icons-hidden class applied has custom toggle show/hide panel button on the left side of the panel,
  // so hide the default PrimeNG toggle button.
  .p-panel-icons-hidden .p-panel-icons
    display: none

  // Padding (0.5rem 0.75rem) was added in PrimeNG aura theme to all span elements inside of Fieldset legend.
  // This breaks many custom Fieldset legends in Stork, because span elements are used there quite often.
  // Overwrite PrimeNG styling to be more specific.
  .p-fieldset .p-fieldset-legend span
    // Reset padding to zero for all span-s inside.
    padding: 0

    // Restore default PrimeNG padding only to span elements with specific classes.
    &.p-fieldset-legend-text, &.stork-fieldset-legend-text
      padding: 0.5rem 0.75rem

    // When stork-fieldset-legend-text class is used, do not apply padding to preceding span.p-fieldset-legend-text.
    &.p-fieldset-legend-text:has(+.stork-fieldset-legend-text)
      padding: 0

    // Sometimes p-tag is used inside Fieldset legend and it is also a span, so restore default p-tag padding.
    &.p-tag
      padding: 0.25rem 0.4rem

  // Do not display underline for the p-fieldset legend when mouse is hovering.
  .p-fieldset.p-fieldset-toggleable .p-fieldset-legend a:hover
    text-decoration: none

  // Overwrite default margin-left: auto for the right hand side paginator.
  .p-paginator > :last-child:not(.p-paginator-last):not(.p-inputwrapper)
    margin-left: 1.25rem

  // Don't preserve the new lines in tooltip text. The line still can be broken by using <br> tag.
  .p-tooltip .p-tooltip-text
    white-space: normal

  // Resets default pointer-events to auto for button elements which were disabled
  // due to lack of privileges (authorization). This is to allow displaying HTML title tag
  // content when mouse hovers over disabled button. Short feedback about lack of privileges
  // should be displayed.
  button.stork-disabled.p-disabled
    pointer-events: auto !important

  // Utility class to apply on form elements.
  // Take full width and limit that with one global width value.
  .max-w-form
    max-width: var(--max-form-width)
    width: 100%

    // Propagate full width inside of PrimeNG form components.
    input, .p-inputwrapper, .p-inputtext, .p-inputnumber
      width: 100%

    // Reapply max-width to PrimeNG wrapper containers that are direct children of components having .max-w-form applied.
    & > .p-inputwrapper
      max-width: var(--max-form-width)

  @media screen and (max-width: 640px)
    .p-toast.stork-toast
      // Make toasts visible on smaller screens.
      // Prevent width overflow.
      max-width: calc(100vw - 2rem)

  @media screen and (max-width: 359px)
    .p-panel .p-panel-content
      // Decrease panel content horizontal padding to save the space on smaller viewports.
      padding-right: 0.5rem
      padding-left: 0.5rem

  // Custom styling for PrimeNG p-multiselect component.
  .p-multiselect.p-multiselect-chip.adaptive-chips-background .p-multiselect-token
    background: var(--primary-100)
    color: var(--text-color)
    margin-right: 4px
    margin-top: 2px
    margin-bottom: 2px

    body.dark &
      // Make chips background darker in dark mode.
      background: var(--primary-400)

  // Define gray-colored spinner.
  @keyframes progress-spinner-color-gray
    0%
      stroke: var(--gray-400)
    100%
      stroke: var(--gray-400)

  // Define white-colored spinner.
  @keyframes progress-spinner-color-white
    0%
      stroke: #fff
    100%
      stroke: #fff

  .gray-spinner .p-progress-spinner-circle
    // Overwrite PrimeNG default colorful spinner with gray-colored spinner.
    animation-name: p-progress-spinner-dash, progress-spinner-color-gray

  .white-spinner .p-progress-spinner-circle
    // Overwrite PrimeNG default colorful spinner with white-colored spinner.
    animation-name: p-progress-spinner-dash, progress-spinner-color-white

// No css @layer - global styles, that have the highest priority.
// These rules overwrite low, primeng and high layers if necessary.

// console-like font style.
.monospace
  font-family: "Lucida Console", Monaco, monospace

// Capitalize first letter of the first word in the container.
.capitalize-first
  &::first-letter
    text-transform: capitalize
  // Propagate the style inside of p-tag component that has the .capitalize-first class applied.
  &.p-tag
    .p-tag-value::first-letter
      @layer high
        text-transform: capitalize

// Allows breaking long lines of text on small
// screens to avoid overlapping on other UI blocks.
.word-break-all
  word-break: break-all

// Prevent the content from growing too wide on larger displays.
// These classes mimic Primeflex utility classes (that end at 30rem max-width).
.max-w-100rem
  max-width: 100rem

.max-w-50rem
  max-width: 50rem

.max-w-40rem
  max-width: 40rem

// Set max-width to prevent horizontal overflow.
.max-w-100vw
  // full viewport width minus some space for margins and paddings
  max-width: calc(100vw - 5rem)

// Custom style for part of PrimeNG p-tabMenu component.
// Sets custom margin for the button which closes active tab.
.close-tab-btn
  // moves the button slightly up, and adds little left margin
  margin: -0.125rem 0 0 0.5rem

// Stork responsive layout using flexbox.
section.stork-layout
  display: flex
  justify-content: space-between
  gap: 1rem
  flex-wrap: wrap

  & > article
    // article is supposed to take 66% width of the viewport.
    // It is main content on the page.
    // It shrinks and grows.
    flex: 2 1 58rem

    & > div:not(:first-child)
      // If there are more div sections in the article, add some horizontal margin to split them.
      margin-top: 1rem

  & > aside
    // aside is supposed to take 33% width of the viewport.
    // It is additional content on the right hand side.
    // It shrinks and grows. When there is not enough space, it goes below the article content and both
    // article and aside take 100% width of the viewport.
    flex: 1 1 19rem

// Set 0 margin for full width top navbar position.
body
  margin: 0
  font-family: 'Open Sans', 'Helvetica Neue', sans-serif

// Root variables.
:root
  // Max width of form. Apply max-width to prevent the form from becoming too wide.
  --max-form-width: 35rem
